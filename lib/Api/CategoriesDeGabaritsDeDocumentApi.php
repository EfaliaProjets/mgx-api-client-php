<?php
/**
 * CategoriesDeGabaritsDeDocumentApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MGX
 *
 * MultiGest version 10
 *
 * The version of the OpenAPI document: canari-11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CategoriesDeGabaritsDeDocumentApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CategoriesDeGabaritsDeDocumentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation creerCategorieGabaritDocument
     *
     * Créer une catégorie de gabarits de document dans un gabarit de dossier
     *
     * @param  string $gabarit L&#39;id du gabarit de dossier (required)
     * @param  \OpenAPI\Client\Model\NomCategorieDocument $nom_categorie_document nom_categorie_document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CategorieDeGabaritsDeDocument|\OpenAPI\Client\Model\RequeteInvalide|\OpenAPI\Client\Model\NonHabilite|\OpenAPI\Client\Model\RessourceIntrouvable|\OpenAPI\Client\Model\APIIndisponible
     */
    public function creerCategorieGabaritDocument($gabarit, $nom_categorie_document)
    {
        list($response) = $this->creerCategorieGabaritDocumentWithHttpInfo($gabarit, $nom_categorie_document);
        return $response;
    }

    /**
     * Operation creerCategorieGabaritDocumentWithHttpInfo
     *
     * Créer une catégorie de gabarits de document dans un gabarit de dossier
     *
     * @param  string $gabarit L&#39;id du gabarit de dossier (required)
     * @param  \OpenAPI\Client\Model\NomCategorieDocument $nom_categorie_document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CategorieDeGabaritsDeDocument|\OpenAPI\Client\Model\RequeteInvalide|\OpenAPI\Client\Model\NonHabilite|\OpenAPI\Client\Model\RessourceIntrouvable|\OpenAPI\Client\Model\APIIndisponible, HTTP status code, HTTP response headers (array of strings)
     */
    public function creerCategorieGabaritDocumentWithHttpInfo($gabarit, $nom_categorie_document)
    {
        $request = $this->creerCategorieGabaritDocumentRequest($gabarit, $nom_categorie_document);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 201:
                    if ('\OpenAPI\Client\Model\CategorieDeGabaritsDeDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CategorieDeGabaritsDeDocument' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CategorieDeGabaritsDeDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\OpenAPI\Client\Model\RequeteInvalide' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RequeteInvalide' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RequeteInvalide', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 403:
                    if ('\OpenAPI\Client\Model\NonHabilite' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NonHabilite' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NonHabilite', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\OpenAPI\Client\Model\RessourceIntrouvable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RessourceIntrouvable' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RessourceIntrouvable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
            
                case 503:
                    if ('\OpenAPI\Client\Model\APIIndisponible' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\APIIndisponible' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\APIIndisponible', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPI\Client\Model\CategorieDeGabaritsDeDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CategorieDeGabaritsDeDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RequeteInvalide',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NonHabilite',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RessourceIntrouvable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
            
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\APIIndisponible',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation creerCategorieGabaritDocumentAsync
     *
     * Créer une catégorie de gabarits de document dans un gabarit de dossier
     *
     * @param  string $gabarit L&#39;id du gabarit de dossier (required)
     * @param  \OpenAPI\Client\Model\NomCategorieDocument $nom_categorie_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creerCategorieGabaritDocumentAsync($gabarit, $nom_categorie_document)
    {
        return $this->creerCategorieGabaritDocumentAsyncWithHttpInfo($gabarit, $nom_categorie_document)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creerCategorieGabaritDocumentAsyncWithHttpInfo
     *
     * Créer une catégorie de gabarits de document dans un gabarit de dossier
     *
     * @param  string $gabarit L&#39;id du gabarit de dossier (required)
     * @param  \OpenAPI\Client\Model\NomCategorieDocument $nom_categorie_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creerCategorieGabaritDocumentAsyncWithHttpInfo($gabarit, $nom_categorie_document)
    {
        $returnType = '\OpenAPI\Client\Model\CategorieDeGabaritsDeDocument';
        $request = $this->creerCategorieGabaritDocumentRequest($gabarit, $nom_categorie_document);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creerCategorieGabaritDocument'
     *
     * @param  string $gabarit L&#39;id du gabarit de dossier (required)
     * @param  \OpenAPI\Client\Model\NomCategorieDocument $nom_categorie_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function creerCategorieGabaritDocumentRequest($gabarit, $nom_categorie_document)
    {

        // verify the required parameter 'gabarit' is set
        if ($gabarit === null || (is_array($gabarit) && count($gabarit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gabarit when calling creerCategorieGabaritDocument'
            );
        }

        // verify the required parameter 'nom_categorie_document' is set
        if ($nom_categorie_document === null || (is_array($nom_categorie_document) && count($nom_categorie_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nom_categorie_document when calling creerCategorieGabaritDocument'
            );
        }

        $resourcePath = '/api/gabarits-de-dossier/{gabarit}/categories-de-gabarits-de-document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($gabarit !== null) {
            $resourcePath = str_replace(
                '{' . 'gabarit' . '}',
                ObjectSerializer::toPathValue($gabarit),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($nom_categorie_document)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($nom_categorie_document));
            } else {
                $httpBody = $nom_categorie_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creerGabaritDocumentCategorie
     *
     * Créer un gabarit de document dans une catégorie
     *
     * @param  string $categorie L&#39;id de la catégorie de gabarits de document (required)
     * @param  \OpenAPI\Client\Model\InputGabaritDeDocument $input_gabarit_de_document input_gabarit_de_document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GabaritDeDocument|\OpenAPI\Client\Model\RequeteInvalide|\OpenAPI\Client\Model\NonHabilite|\OpenAPI\Client\Model\RessourceIntrouvable|\OpenAPI\Client\Model\APIIndisponible
     */
    public function creerGabaritDocumentCategorie($categorie, $input_gabarit_de_document)
    {
        list($response) = $this->creerGabaritDocumentCategorieWithHttpInfo($categorie, $input_gabarit_de_document);
        return $response;
    }

    /**
     * Operation creerGabaritDocumentCategorieWithHttpInfo
     *
     * Créer un gabarit de document dans une catégorie
     *
     * @param  string $categorie L&#39;id de la catégorie de gabarits de document (required)
     * @param  \OpenAPI\Client\Model\InputGabaritDeDocument $input_gabarit_de_document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GabaritDeDocument|\OpenAPI\Client\Model\RequeteInvalide|\OpenAPI\Client\Model\NonHabilite|\OpenAPI\Client\Model\RessourceIntrouvable|\OpenAPI\Client\Model\APIIndisponible, HTTP status code, HTTP response headers (array of strings)
     */
    public function creerGabaritDocumentCategorieWithHttpInfo($categorie, $input_gabarit_de_document)
    {
        $request = $this->creerGabaritDocumentCategorieRequest($categorie, $input_gabarit_de_document);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 201:
                    if ('\OpenAPI\Client\Model\GabaritDeDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GabaritDeDocument' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GabaritDeDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\OpenAPI\Client\Model\RequeteInvalide' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RequeteInvalide' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RequeteInvalide', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 403:
                    if ('\OpenAPI\Client\Model\NonHabilite' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NonHabilite' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NonHabilite', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\OpenAPI\Client\Model\RessourceIntrouvable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RessourceIntrouvable' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RessourceIntrouvable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
            
                case 503:
                    if ('\OpenAPI\Client\Model\APIIndisponible' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\APIIndisponible' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\APIIndisponible', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPI\Client\Model\GabaritDeDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GabaritDeDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RequeteInvalide',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NonHabilite',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RessourceIntrouvable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
            
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\APIIndisponible',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation creerGabaritDocumentCategorieAsync
     *
     * Créer un gabarit de document dans une catégorie
     *
     * @param  string $categorie L&#39;id de la catégorie de gabarits de document (required)
     * @param  \OpenAPI\Client\Model\InputGabaritDeDocument $input_gabarit_de_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creerGabaritDocumentCategorieAsync($categorie, $input_gabarit_de_document)
    {
        return $this->creerGabaritDocumentCategorieAsyncWithHttpInfo($categorie, $input_gabarit_de_document)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creerGabaritDocumentCategorieAsyncWithHttpInfo
     *
     * Créer un gabarit de document dans une catégorie
     *
     * @param  string $categorie L&#39;id de la catégorie de gabarits de document (required)
     * @param  \OpenAPI\Client\Model\InputGabaritDeDocument $input_gabarit_de_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creerGabaritDocumentCategorieAsyncWithHttpInfo($categorie, $input_gabarit_de_document)
    {
        $returnType = '\OpenAPI\Client\Model\GabaritDeDocument';
        $request = $this->creerGabaritDocumentCategorieRequest($categorie, $input_gabarit_de_document);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creerGabaritDocumentCategorie'
     *
     * @param  string $categorie L&#39;id de la catégorie de gabarits de document (required)
     * @param  \OpenAPI\Client\Model\InputGabaritDeDocument $input_gabarit_de_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function creerGabaritDocumentCategorieRequest($categorie, $input_gabarit_de_document)
    {

        // verify the required parameter 'categorie' is set
        if ($categorie === null || (is_array($categorie) && count($categorie) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categorie when calling creerGabaritDocumentCategorie'
            );
        }

        // verify the required parameter 'input_gabarit_de_document' is set
        if ($input_gabarit_de_document === null || (is_array($input_gabarit_de_document) && count($input_gabarit_de_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_gabarit_de_document when calling creerGabaritDocumentCategorie'
            );
        }

        $resourcePath = '/api/categories-de-gabarits-de-document/{categorie}/gabarits-de-document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($categorie !== null) {
            $resourcePath = str_replace(
                '{' . 'categorie' . '}',
                ObjectSerializer::toPathValue($categorie),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($input_gabarit_de_document)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($input_gabarit_de_document));
            } else {
                $httpBody = $input_gabarit_de_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation renommerCategorieGabaritDocument
     *
     * Renommer une catégorie de gabarits de document
     *
     * @param  string $id L&#39;id de la catégorie de gabarits de document (required)
     * @param  \OpenAPI\Client\Model\IdCategorieDocument $id_categorie_document id_categorie_document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CategorieDeGabaritsDeDocument|\OpenAPI\Client\Model\RequeteInvalide|\OpenAPI\Client\Model\NonHabilite|\OpenAPI\Client\Model\RessourceIntrouvable|\OpenAPI\Client\Model\APIIndisponible
     */
    public function renommerCategorieGabaritDocument($id, $id_categorie_document)
    {
        list($response) = $this->renommerCategorieGabaritDocumentWithHttpInfo($id, $id_categorie_document);
        return $response;
    }

    /**
     * Operation renommerCategorieGabaritDocumentWithHttpInfo
     *
     * Renommer une catégorie de gabarits de document
     *
     * @param  string $id L&#39;id de la catégorie de gabarits de document (required)
     * @param  \OpenAPI\Client\Model\IdCategorieDocument $id_categorie_document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CategorieDeGabaritsDeDocument|\OpenAPI\Client\Model\RequeteInvalide|\OpenAPI\Client\Model\NonHabilite|\OpenAPI\Client\Model\RessourceIntrouvable|\OpenAPI\Client\Model\APIIndisponible, HTTP status code, HTTP response headers (array of strings)
     */
    public function renommerCategorieGabaritDocumentWithHttpInfo($id, $id_categorie_document)
    {
        $request = $this->renommerCategorieGabaritDocumentRequest($id, $id_categorie_document);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\CategorieDeGabaritsDeDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CategorieDeGabaritsDeDocument' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CategorieDeGabaritsDeDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\OpenAPI\Client\Model\RequeteInvalide' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RequeteInvalide' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RequeteInvalide', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 403:
                    if ('\OpenAPI\Client\Model\NonHabilite' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NonHabilite' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NonHabilite', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\OpenAPI\Client\Model\RessourceIntrouvable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RessourceIntrouvable' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RessourceIntrouvable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
            
                case 503:
                    if ('\OpenAPI\Client\Model\APIIndisponible' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\APIIndisponible' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\APIIndisponible', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPI\Client\Model\CategorieDeGabaritsDeDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CategorieDeGabaritsDeDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RequeteInvalide',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NonHabilite',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RessourceIntrouvable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
            
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\APIIndisponible',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation renommerCategorieGabaritDocumentAsync
     *
     * Renommer une catégorie de gabarits de document
     *
     * @param  string $id L&#39;id de la catégorie de gabarits de document (required)
     * @param  \OpenAPI\Client\Model\IdCategorieDocument $id_categorie_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renommerCategorieGabaritDocumentAsync($id, $id_categorie_document)
    {
        return $this->renommerCategorieGabaritDocumentAsyncWithHttpInfo($id, $id_categorie_document)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation renommerCategorieGabaritDocumentAsyncWithHttpInfo
     *
     * Renommer une catégorie de gabarits de document
     *
     * @param  string $id L&#39;id de la catégorie de gabarits de document (required)
     * @param  \OpenAPI\Client\Model\IdCategorieDocument $id_categorie_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renommerCategorieGabaritDocumentAsyncWithHttpInfo($id, $id_categorie_document)
    {
        $returnType = '\OpenAPI\Client\Model\CategorieDeGabaritsDeDocument';
        $request = $this->renommerCategorieGabaritDocumentRequest($id, $id_categorie_document);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'renommerCategorieGabaritDocument'
     *
     * @param  string $id L&#39;id de la catégorie de gabarits de document (required)
     * @param  \OpenAPI\Client\Model\IdCategorieDocument $id_categorie_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function renommerCategorieGabaritDocumentRequest($id, $id_categorie_document)
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling renommerCategorieGabaritDocument'
            );
        }

        // verify the required parameter 'id_categorie_document' is set
        if ($id_categorie_document === null || (is_array($id_categorie_document) && count($id_categorie_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_categorie_document when calling renommerCategorieGabaritDocument'
            );
        }

        $resourcePath = '/api/categories-de-gabarits-de-document/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($id_categorie_document)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($id_categorie_document));
            } else {
                $httpBody = $id_categorie_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation supprimerCategorieGabaritDocument
     *
     * Supprimer une catégorie de gabarits de document
     *
     * @param  string $id L&#39;id de la catégorie de gabarits de document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function supprimerCategorieGabaritDocument($id)
    {
        $this->supprimerCategorieGabaritDocumentWithHttpInfo($id);
    }

    /**
     * Operation supprimerCategorieGabaritDocumentWithHttpInfo
     *
     * Supprimer une catégorie de gabarits de document
     *
     * @param  string $id L&#39;id de la catégorie de gabarits de document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function supprimerCategorieGabaritDocumentWithHttpInfo($id)
    {
        $request = $this->supprimerCategorieGabaritDocumentRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RequeteInvalide',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NonHabilite',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RessourceIntrouvable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\APIIndisponible',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation supprimerCategorieGabaritDocumentAsync
     *
     * Supprimer une catégorie de gabarits de document
     *
     * @param  string $id L&#39;id de la catégorie de gabarits de document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supprimerCategorieGabaritDocumentAsync($id)
    {
        return $this->supprimerCategorieGabaritDocumentAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation supprimerCategorieGabaritDocumentAsyncWithHttpInfo
     *
     * Supprimer une catégorie de gabarits de document
     *
     * @param  string $id L&#39;id de la catégorie de gabarits de document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supprimerCategorieGabaritDocumentAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->supprimerCategorieGabaritDocumentRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'supprimerCategorieGabaritDocument'
     *
     * @param  string $id L&#39;id de la catégorie de gabarits de document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function supprimerCategorieGabaritDocumentRequest($id)
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling supprimerCategorieGabaritDocument'
            );
        }

        $resourcePath = '/api/categories-de-gabarits-de-document/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
