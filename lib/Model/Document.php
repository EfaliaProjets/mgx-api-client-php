<?php
/**
 * Document
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MGX
 *
 * MultiGest version 10
 *
 * The version of the OpenAPI document: canari-11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Document Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Document implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'nom' => 'string',
        'media_type' => 'string',
        'classe' => 'bool',
        'pre_classe' => 'bool',
        'gabarit' => 'string',
        'dossier' => 'string',
        'bannette' => 'string',
        'cree_le' => '\DateTime',
        'mis_a_jour_le' => '\DateTime',
        'metadonnees' => '\OpenAPI\Client\Model\Metadonnee[]',
        'indexation_demandee_le' => '\DateTime',
        'indexe_le' => '\DateTime',
        'empreinte' => 'string',
        'verrouille' => 'bool',
        'versions' => '\OpenAPI\Client\Model\DocumentVersionsInner[]',
        'cree_par' => '\OpenAPI\Client\Model\DocumentCreePar'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'nom' => null,
        'media_type' => null,
        'classe' => null,
        'pre_classe' => null,
        'gabarit' => 'uuid',
        'dossier' => 'uuid',
        'bannette' => 'uuid',
        'cree_le' => 'date-time',
        'mis_a_jour_le' => 'date-time',
        'metadonnees' => null,
        'indexation_demandee_le' => 'date-time',
        'indexe_le' => 'date-time',
        'empreinte' => null,
        'verrouille' => null,
        'versions' => null,
        'cree_par' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'nom' => false,
		'media_type' => false,
		'classe' => false,
		'pre_classe' => false,
		'gabarit' => false,
		'dossier' => false,
		'bannette' => false,
		'cree_le' => false,
		'mis_a_jour_le' => false,
		'metadonnees' => false,
		'indexation_demandee_le' => true,
		'indexe_le' => true,
		'empreinte' => false,
		'verrouille' => false,
		'versions' => false,
		'cree_par' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'nom' => 'nom',
        'media_type' => 'mediaType',
        'classe' => 'classe',
        'pre_classe' => 'preClasse',
        'gabarit' => 'gabarit',
        'dossier' => 'dossier',
        'bannette' => 'bannette',
        'cree_le' => 'creeLe',
        'mis_a_jour_le' => 'misAJourLe',
        'metadonnees' => 'metadonnees',
        'indexation_demandee_le' => 'indexationDemandeeLe',
        'indexe_le' => 'indexeLe',
        'empreinte' => 'empreinte',
        'verrouille' => 'verrouille',
        'versions' => 'versions',
        'cree_par' => 'creePar'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'nom' => 'setNom',
        'media_type' => 'setMediaType',
        'classe' => 'setClasse',
        'pre_classe' => 'setPreClasse',
        'gabarit' => 'setGabarit',
        'dossier' => 'setDossier',
        'bannette' => 'setBannette',
        'cree_le' => 'setCreeLe',
        'mis_a_jour_le' => 'setMisAJourLe',
        'metadonnees' => 'setMetadonnees',
        'indexation_demandee_le' => 'setIndexationDemandeeLe',
        'indexe_le' => 'setIndexeLe',
        'empreinte' => 'setEmpreinte',
        'verrouille' => 'setVerrouille',
        'versions' => 'setVersions',
        'cree_par' => 'setCreePar'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'nom' => 'getNom',
        'media_type' => 'getMediaType',
        'classe' => 'getClasse',
        'pre_classe' => 'getPreClasse',
        'gabarit' => 'getGabarit',
        'dossier' => 'getDossier',
        'bannette' => 'getBannette',
        'cree_le' => 'getCreeLe',
        'mis_a_jour_le' => 'getMisAJourLe',
        'metadonnees' => 'getMetadonnees',
        'indexation_demandee_le' => 'getIndexationDemandeeLe',
        'indexe_le' => 'getIndexeLe',
        'empreinte' => 'getEmpreinte',
        'verrouille' => 'getVerrouille',
        'versions' => 'getVersions',
        'cree_par' => 'getCreePar'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('nom', $data ?? [], null);
        $this->setIfExists('media_type', $data ?? [], null);
        $this->setIfExists('classe', $data ?? [], null);
        $this->setIfExists('pre_classe', $data ?? [], null);
        $this->setIfExists('gabarit', $data ?? [], null);
        $this->setIfExists('dossier', $data ?? [], null);
        $this->setIfExists('bannette', $data ?? [], null);
        $this->setIfExists('cree_le', $data ?? [], null);
        $this->setIfExists('mis_a_jour_le', $data ?? [], null);
        $this->setIfExists('metadonnees', $data ?? [], null);
        $this->setIfExists('indexation_demandee_le', $data ?? [], null);
        $this->setIfExists('indexe_le', $data ?? [], null);
        $this->setIfExists('empreinte', $data ?? [], null);
        $this->setIfExists('verrouille', $data ?? [], null);
        $this->setIfExists('versions', $data ?? [], null);
        $this->setIfExists('cree_par', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['nom'] === null) {
            $invalidProperties[] = "'nom' can't be null";
        }
        if ($this->container['media_type'] === null) {
            $invalidProperties[] = "'media_type' can't be null";
        }
        if ($this->container['classe'] === null) {
            $invalidProperties[] = "'classe' can't be null";
        }
        if ($this->container['pre_classe'] === null) {
            $invalidProperties[] = "'pre_classe' can't be null";
        }
        if ($this->container['cree_le'] === null) {
            $invalidProperties[] = "'cree_le' can't be null";
        }
        if ($this->container['mis_a_jour_le'] === null) {
            $invalidProperties[] = "'mis_a_jour_le' can't be null";
        }
        if ($this->container['metadonnees'] === null) {
            $invalidProperties[] = "'metadonnees' can't be null";
        }
        if ($this->container['indexation_demandee_le'] === null) {
            $invalidProperties[] = "'indexation_demandee_le' can't be null";
        }
        if ($this->container['indexe_le'] === null) {
            $invalidProperties[] = "'indexe_le' can't be null";
        }
        if ($this->container['empreinte'] === null) {
            $invalidProperties[] = "'empreinte' can't be null";
        }
        if ($this->container['verrouille'] === null) {
            $invalidProperties[] = "'verrouille' can't be null";
        }
        if ($this->container['versions'] === null) {
            $invalidProperties[] = "'versions' can't be null";
        }
        if ($this->container['cree_par'] === null) {
            $invalidProperties[] = "'cree_par' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets nom
     *
     * @return string
     */
    public function getNom()
    {
        return $this->container['nom'];
    }

    /**
     * Sets nom
     *
     * @param string $nom nom
     *
     * @return self
     */
    public function setNom($nom)
    {

        if (is_null($nom)) {
            throw new \InvalidArgumentException('non-nullable nom cannot be null');
        }

        $this->container['nom'] = $nom;

        return $this;
    }

    /**
     * Gets media_type
     *
     * @return string
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     *
     * @param string $media_type Media type de la version la plus récente
     *
     * @return self
     */
    public function setMediaType($media_type)
    {

        if (is_null($media_type)) {
            throw new \InvalidArgumentException('non-nullable media_type cannot be null');
        }

        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets classe
     *
     * @return bool
     */
    public function getClasse()
    {
        return $this->container['classe'];
    }

    /**
     * Sets classe
     *
     * @param bool $classe classe
     *
     * @return self
     */
    public function setClasse($classe)
    {

        if (is_null($classe)) {
            throw new \InvalidArgumentException('non-nullable classe cannot be null');
        }

        $this->container['classe'] = $classe;

        return $this;
    }

    /**
     * Gets pre_classe
     *
     * @return bool
     */
    public function getPreClasse()
    {
        return $this->container['pre_classe'];
    }

    /**
     * Sets pre_classe
     *
     * @param bool $pre_classe pre_classe
     *
     * @return self
     */
    public function setPreClasse($pre_classe)
    {

        if (is_null($pre_classe)) {
            throw new \InvalidArgumentException('non-nullable pre_classe cannot be null');
        }

        $this->container['pre_classe'] = $pre_classe;

        return $this;
    }

    /**
     * Gets gabarit
     *
     * @return string|null
     */
    public function getGabarit()
    {
        return $this->container['gabarit'];
    }

    /**
     * Sets gabarit
     *
     * @param string|null $gabarit gabarit
     *
     * @return self
     */
    public function setGabarit($gabarit)
    {

        if (is_null($gabarit)) {
            throw new \InvalidArgumentException('non-nullable gabarit cannot be null');
        }

        $this->container['gabarit'] = $gabarit;

        return $this;
    }

    /**
     * Gets dossier
     *
     * @return string|null
     */
    public function getDossier()
    {
        return $this->container['dossier'];
    }

    /**
     * Sets dossier
     *
     * @param string|null $dossier dossier
     *
     * @return self
     */
    public function setDossier($dossier)
    {

        if (is_null($dossier)) {
            throw new \InvalidArgumentException('non-nullable dossier cannot be null');
        }

        $this->container['dossier'] = $dossier;

        return $this;
    }

    /**
     * Gets bannette
     *
     * @return string|null
     */
    public function getBannette()
    {
        return $this->container['bannette'];
    }

    /**
     * Sets bannette
     *
     * @param string|null $bannette bannette
     *
     * @return self
     */
    public function setBannette($bannette)
    {

        if (is_null($bannette)) {
            throw new \InvalidArgumentException('non-nullable bannette cannot be null');
        }

        $this->container['bannette'] = $bannette;

        return $this;
    }

    /**
     * Gets cree_le
     *
     * @return \DateTime
     */
    public function getCreeLe()
    {
        return $this->container['cree_le'];
    }

    /**
     * Sets cree_le
     *
     * @param \DateTime $cree_le cree_le
     *
     * @return self
     */
    public function setCreeLe($cree_le)
    {

        if (is_null($cree_le)) {
            throw new \InvalidArgumentException('non-nullable cree_le cannot be null');
        }

        $this->container['cree_le'] = $cree_le;

        return $this;
    }

    /**
     * Gets mis_a_jour_le
     *
     * @return \DateTime
     */
    public function getMisAJourLe()
    {
        return $this->container['mis_a_jour_le'];
    }

    /**
     * Sets mis_a_jour_le
     *
     * @param \DateTime $mis_a_jour_le mis_a_jour_le
     *
     * @return self
     */
    public function setMisAJourLe($mis_a_jour_le)
    {

        if (is_null($mis_a_jour_le)) {
            throw new \InvalidArgumentException('non-nullable mis_a_jour_le cannot be null');
        }

        $this->container['mis_a_jour_le'] = $mis_a_jour_le;

        return $this;
    }

    /**
     * Gets metadonnees
     *
     * @return \OpenAPI\Client\Model\Metadonnee[]
     */
    public function getMetadonnees()
    {
        return $this->container['metadonnees'];
    }

    /**
     * Sets metadonnees
     *
     * @param \OpenAPI\Client\Model\Metadonnee[] $metadonnees metadonnees
     *
     * @return self
     */
    public function setMetadonnees($metadonnees)
    {

        if (is_null($metadonnees)) {
            throw new \InvalidArgumentException('non-nullable metadonnees cannot be null');
        }

        $this->container['metadonnees'] = $metadonnees;

        return $this;
    }

    /**
     * Gets indexation_demandee_le
     *
     * @return \DateTime
     */
    public function getIndexationDemandeeLe()
    {
        return $this->container['indexation_demandee_le'];
    }

    /**
     * Sets indexation_demandee_le
     *
     * @param \DateTime $indexation_demandee_le indexation_demandee_le
     *
     * @return self
     */
    public function setIndexationDemandeeLe($indexation_demandee_le)
    {

        if (is_null($indexation_demandee_le)) {
            array_push($this->openAPINullablesSetToNull, 'indexation_demandee_le');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('indexation_demandee_le', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['indexation_demandee_le'] = $indexation_demandee_le;

        return $this;
    }

    /**
     * Gets indexe_le
     *
     * @return \DateTime
     */
    public function getIndexeLe()
    {
        return $this->container['indexe_le'];
    }

    /**
     * Sets indexe_le
     *
     * @param \DateTime $indexe_le indexe_le
     *
     * @return self
     */
    public function setIndexeLe($indexe_le)
    {

        if (is_null($indexe_le)) {
            array_push($this->openAPINullablesSetToNull, 'indexe_le');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('indexe_le', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['indexe_le'] = $indexe_le;

        return $this;
    }

    /**
     * Gets empreinte
     *
     * @return string
     */
    public function getEmpreinte()
    {
        return $this->container['empreinte'];
    }

    /**
     * Sets empreinte
     *
     * @param string $empreinte Empreinte de la version la plus récente
     *
     * @return self
     */
    public function setEmpreinte($empreinte)
    {

        if (is_null($empreinte)) {
            throw new \InvalidArgumentException('non-nullable empreinte cannot be null');
        }

        $this->container['empreinte'] = $empreinte;

        return $this;
    }

    /**
     * Gets verrouille
     *
     * @return bool
     */
    public function getVerrouille()
    {
        return $this->container['verrouille'];
    }

    /**
     * Sets verrouille
     *
     * @param bool $verrouille verrouille
     *
     * @return self
     */
    public function setVerrouille($verrouille)
    {

        if (is_null($verrouille)) {
            throw new \InvalidArgumentException('non-nullable verrouille cannot be null');
        }

        $this->container['verrouille'] = $verrouille;

        return $this;
    }

    /**
     * Gets versions
     *
     * @return \OpenAPI\Client\Model\DocumentVersionsInner[]
     */
    public function getVersions()
    {
        return $this->container['versions'];
    }

    /**
     * Sets versions
     *
     * @param \OpenAPI\Client\Model\DocumentVersionsInner[] $versions versions
     *
     * @return self
     */
    public function setVersions($versions)
    {

        if (is_null($versions)) {
            throw new \InvalidArgumentException('non-nullable versions cannot be null');
        }

        $this->container['versions'] = $versions;

        return $this;
    }

    /**
     * Gets cree_par
     *
     * @return \OpenAPI\Client\Model\DocumentCreePar
     */
    public function getCreePar()
    {
        return $this->container['cree_par'];
    }

    /**
     * Sets cree_par
     *
     * @param \OpenAPI\Client\Model\DocumentCreePar $cree_par cree_par
     *
     * @return self
     */
    public function setCreePar($cree_par)
    {

        if (is_null($cree_par)) {
            array_push($this->openAPINullablesSetToNull, 'cree_par');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cree_par', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['cree_par'] = $cree_par;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


