<?php
/**
 * RequeteInvalide
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MGX
 *
 * MultiGest version 10
 *
 * The version of the OpenAPI document: canari-11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RequeteInvalide Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RequeteInvalide implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Requete_invalide';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'message' => 'string',
        'code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'message' => null,
        'code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'message' => false,
		'code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message' => 'message',
        'code' => 'code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message' => 'setMessage',
        'code' => 'setCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message' => 'getMessage',
        'code' => 'getCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CODE_ARMOIRE_CONTIENT_DES_ELEMENTS = 'armoire_contient_des_elements';
    public const CODE_ARMOIRE_NON_ASSOCIEE_AU_ROLE = 'armoire_non_associee_au_role';
    public const CODE_AU_MOINS_UN_PARAMETRE_SUBSTITUTIF_REQUIS_DANS_MODELE_NOM_DYNAMIQUE = 'au_moins_un_parametre_substitutif_requis_dans_modele_nom_dynamique';
    public const CODE_BANNETTE_CONTIENT_DES_ELEMENTS = 'bannette_contient_des_elements';
    public const CODE_CATEGORIE_DE_GABARITS_DE_DOCUMENT_CONTIENT_DES_ELEMENTS = 'categorie_de_gabarits_de_document_contient_des_elements';
    public const CODE_CLASSEMENT_MAUVAIS_DOSSIER = 'classement_mauvais_dossier';
    public const CODE_CLASSEMENT_REQUIERT_DOSSIER = 'classement_requiert_dossier';
    public const CODE_CONDITION_RECHERCHE_METADONNEE_ENUM_INVALIDE = 'condition_recherche_metadonnee_enum_invalide';
    public const CODE_DES_DOCUMENTS_EXISTENT_DEJA = 'des_documents_existent_deja';
    public const CODE_DES_DOSSIERS_EXISTENT_DEJA = 'des_dossiers_existent_deja';
    public const CODE_DESCRIPTION_TROP_LONGUE = 'description_trop_longue';
    public const CODE_DOCUMENT_NE_PEUT_PAS_ETRE_RECLASSE = 'document_ne_peut_pas_etre_reclasse';
    public const CODE_DOCUMENT_NON_CLASSE = 'document_non_classe';
    public const CODE_DOSSIER_CONTIENT_DES_ELEMENTS = 'dossier_contient_des_elements';
    public const CODE_ECHEC_LANCEMENT_PROCESSUS = 'echec_lancement_processus';
    public const CODE_EMAIL_INVALIDE = 'email_invalide';
    public const CODE_ERREUR_UPLOAD = 'erreur_upload';
    public const CODE_FILTRE_ACCES_DEFINI_SUR_GABARIT_DE_DOSSIER = 'filtre_acces_defini_sur_gabarit_de_dossier';
    public const CODE_FILTRE_ACCES_NON_DEFINI_SUR_GABARIT_DE_DOSSIER = 'filtre_acces_non_defini_sur_gabarit_de_dossier';
    public const CODE_FILTRE_ACCES_UTILISE_DANS_HABILITATION = 'filtre_acces_utilise_dans_habilitation';
    public const CODE_FILTRE_REFERENCE_LISTE_UTILISATEURS = 'filtre_reference_liste_utilisateurs';
    public const CODE_FORMAT_ENUM_SANS_LISTE_PREDEFINIE = 'format_enum_sans_liste_predefinie';
    public const CODE_FORMAT_PAYLOAD_INVALIDE = 'format_payload_invalide';
    public const CODE_FORMAT_VALEUR_METADONNEE_INVALIDE = 'format_valeur_metadonnee_invalide';
    public const CODE_FORMATS_DES_METADONNEES_DU_LIEN_DOIVENT_ETRE_IDENTIQUES = 'formats_des_metadonnees_du_lien_doivent_etre_identiques';
    public const CODE_GABARIT_DE_DOCUMENT_CONTIENT_DES_ELEMENTS = 'gabarit_de_document_contient_des_elements';
    public const CODE_GABARIT_DE_DOSSIER_CONTIENT_DES_ELEMENTS = 'gabarit_de_dossier_contient_des_elements';
    public const CODE_GABARIT_DE_DOSSIER_UTILISE_DANS_UN_LIEN = 'gabarit_de_dossier_utilise_dans_un_lien';
    public const CODE_GROUPEMENT_IMPOSSIBLE = 'groupement_impossible';
    public const CODE_GROUPEMENT_PAR_METADONNEE_OBLIGATOIRE_REQUIS = 'groupement_par_metadonnee_obligatoire_requis';
    public const CODE_IDENTIFIANT_NE_PEUT_PAS_ETRE_VIDE = 'identifiant_ne_peut_pas_etre_vide';
    public const CODE_LIBELLE_OBLIGATOIRE = 'libelle_obligatoire';
    public const CODE_LIBELLE_TROP_LONG = 'libelle_trop_long';
    public const CODE_LISTE_PREDEFINIE_VIDE = 'liste_predefinie_vide';
    public const CODE_METADONNEE_DU_LIEN_DOIT_ETRE_OBLIGATOIRE = 'metadonnee_du_lien_doit_etre_obligatoire';
    public const CODE_METADONNEE_NON_RENSEIGNEE = 'metadonnee_non_renseignee';
    public const CODE_METADONNEE_UTILISEE_DANS_NOM_DYNAMIQUE = 'metadonnee_utilisee_dans_nom_dynamique';
    public const CODE_METADONNEE_UTILISEE_DANS_UN_LIEN = 'metadonnee_utilisee_dans_un_lien';
    public const CODE_METADONNEE_UTILISEE_POUR_GROUPEMENT = 'metadonnee_utilisee_pour_groupement';
    public const CODE_MODELE_NOM_DYNAMIQUE_REQUIS = 'modele_nom_dynamique_requis';
    public const CODE_MOT_DE_PASSE_LDAP_NON_MODIFIABLE = 'mot_de_passe_ldap_non_modifiable';
    public const CODE_MOT_DE_PASSE_NE_PEUT_PAS_ETRE_VIDE = 'mot_de_passe_ne_peut_pas_etre_vide';
    public const CODE_NOM_DOCUMENT_WORKEY_OBLIGATOIRE = 'nom_document_workey_obligatoire';
    public const CODE_NOM_OBLIGATOIRE = 'nom_obligatoire';
    public const CODE_NOM_ORIGINE_OBLIGATOIRE = 'nom_origine_obligatoire';
    public const CODE_NOM_ROLE_WORKEY_OBLIGATOIRE = 'nom_role_workey_obligatoire';
    public const CODE_NOM_TECHNIQUE_WORKEY_OBLIGATOIRE = 'nom_technique_workey_obligatoire';
    public const CODE_PERIODE_GROUPEMENT_REQUISE = 'periode_groupement_requise';
    public const CODE_PROCESSUS_ASSOCIE_GABARIT_DE_DOCUMENT = 'processus_associe_gabarit_de_document';
    public const CODE_TROP_DE_DOCUMENTS_EXISTENT_POUR_MODIFIER_LES_METADONNEES = 'trop_de_documents_existent_pour_modifier_les_metadonnees';
    public const CODE_TROP_DE_DOSSIERS_EXISTENT_POUR_MODIFIER_LES_METADONNEES = 'trop_de_dossiers_existent_pour_modifier_les_metadonnees';
    public const CODE_UTILISATEUR_UTILISE_DANS_UN_DOCUMENT = 'utilisateur_utilise_dans_un_document';
    public const CODE_UTILISATEUR_UTILISE_DANS_UN_DOSSIER = 'utilisateur_utilise_dans_un_dossier';
    public const CODE_UTILISATEUR_UTILISE_DANS_UN_FILTRE = 'utilisateur_utilise_dans_un_filtre';
    public const CODE_VALEUR_FILTRE_ACCES_SELECTIONNEE_POUR_UN_UTILISATEUR = 'valeur_filtre_acces_selectionnee_pour_un_utilisateur';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_ARMOIRE_CONTIENT_DES_ELEMENTS,
            self::CODE_ARMOIRE_NON_ASSOCIEE_AU_ROLE,
            self::CODE_AU_MOINS_UN_PARAMETRE_SUBSTITUTIF_REQUIS_DANS_MODELE_NOM_DYNAMIQUE,
            self::CODE_BANNETTE_CONTIENT_DES_ELEMENTS,
            self::CODE_CATEGORIE_DE_GABARITS_DE_DOCUMENT_CONTIENT_DES_ELEMENTS,
            self::CODE_CLASSEMENT_MAUVAIS_DOSSIER,
            self::CODE_CLASSEMENT_REQUIERT_DOSSIER,
            self::CODE_CONDITION_RECHERCHE_METADONNEE_ENUM_INVALIDE,
            self::CODE_DES_DOCUMENTS_EXISTENT_DEJA,
            self::CODE_DES_DOSSIERS_EXISTENT_DEJA,
            self::CODE_DESCRIPTION_TROP_LONGUE,
            self::CODE_DOCUMENT_NE_PEUT_PAS_ETRE_RECLASSE,
            self::CODE_DOCUMENT_NON_CLASSE,
            self::CODE_DOSSIER_CONTIENT_DES_ELEMENTS,
            self::CODE_ECHEC_LANCEMENT_PROCESSUS,
            self::CODE_EMAIL_INVALIDE,
            self::CODE_ERREUR_UPLOAD,
            self::CODE_FILTRE_ACCES_DEFINI_SUR_GABARIT_DE_DOSSIER,
            self::CODE_FILTRE_ACCES_NON_DEFINI_SUR_GABARIT_DE_DOSSIER,
            self::CODE_FILTRE_ACCES_UTILISE_DANS_HABILITATION,
            self::CODE_FILTRE_REFERENCE_LISTE_UTILISATEURS,
            self::CODE_FORMAT_ENUM_SANS_LISTE_PREDEFINIE,
            self::CODE_FORMAT_PAYLOAD_INVALIDE,
            self::CODE_FORMAT_VALEUR_METADONNEE_INVALIDE,
            self::CODE_FORMATS_DES_METADONNEES_DU_LIEN_DOIVENT_ETRE_IDENTIQUES,
            self::CODE_GABARIT_DE_DOCUMENT_CONTIENT_DES_ELEMENTS,
            self::CODE_GABARIT_DE_DOSSIER_CONTIENT_DES_ELEMENTS,
            self::CODE_GABARIT_DE_DOSSIER_UTILISE_DANS_UN_LIEN,
            self::CODE_GROUPEMENT_IMPOSSIBLE,
            self::CODE_GROUPEMENT_PAR_METADONNEE_OBLIGATOIRE_REQUIS,
            self::CODE_IDENTIFIANT_NE_PEUT_PAS_ETRE_VIDE,
            self::CODE_LIBELLE_OBLIGATOIRE,
            self::CODE_LIBELLE_TROP_LONG,
            self::CODE_LISTE_PREDEFINIE_VIDE,
            self::CODE_METADONNEE_DU_LIEN_DOIT_ETRE_OBLIGATOIRE,
            self::CODE_METADONNEE_NON_RENSEIGNEE,
            self::CODE_METADONNEE_UTILISEE_DANS_NOM_DYNAMIQUE,
            self::CODE_METADONNEE_UTILISEE_DANS_UN_LIEN,
            self::CODE_METADONNEE_UTILISEE_POUR_GROUPEMENT,
            self::CODE_MODELE_NOM_DYNAMIQUE_REQUIS,
            self::CODE_MOT_DE_PASSE_LDAP_NON_MODIFIABLE,
            self::CODE_MOT_DE_PASSE_NE_PEUT_PAS_ETRE_VIDE,
            self::CODE_NOM_DOCUMENT_WORKEY_OBLIGATOIRE,
            self::CODE_NOM_OBLIGATOIRE,
            self::CODE_NOM_ORIGINE_OBLIGATOIRE,
            self::CODE_NOM_ROLE_WORKEY_OBLIGATOIRE,
            self::CODE_NOM_TECHNIQUE_WORKEY_OBLIGATOIRE,
            self::CODE_PERIODE_GROUPEMENT_REQUISE,
            self::CODE_PROCESSUS_ASSOCIE_GABARIT_DE_DOCUMENT,
            self::CODE_TROP_DE_DOCUMENTS_EXISTENT_POUR_MODIFIER_LES_METADONNEES,
            self::CODE_TROP_DE_DOSSIERS_EXISTENT_POUR_MODIFIER_LES_METADONNEES,
            self::CODE_UTILISATEUR_UTILISE_DANS_UN_DOCUMENT,
            self::CODE_UTILISATEUR_UTILISE_DANS_UN_DOSSIER,
            self::CODE_UTILISATEUR_UTILISE_DANS_UN_FILTRE,
            self::CODE_VALEUR_FILTRE_ACCES_SELECTIONNEE_POUR_UN_UTILISATEUR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'code', must be one of '%s'",
                $this->container['code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return self
     */
    public function setMessage($message)
    {

        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }

        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'code', must be one of '%s'",
                    $code,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }

        $this->container['code'] = $code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


