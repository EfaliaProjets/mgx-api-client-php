<?php
/**
 * Utilisateur
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MGX
 *
 * MultiGest version 10
 *
 * The version of the OpenAPI document: canari-11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Utilisateur Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Utilisateur implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Utilisateur';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'identifiant' => 'string',
        'nom_complet' => 'string',
        'email' => 'string',
        'est_administrateur' => 'bool',
        'est_actif' => 'bool',
        'roles' => 'string[]',
        'vient_du_ldap' => 'bool',
        'vient_de_mg_login' => 'bool',
        'filtres_acces' => '\OpenAPI\Client\Model\DossierFiltresAccesInnerOneOf[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'identifiant' => null,
        'nom_complet' => null,
        'email' => null,
        'est_administrateur' => null,
        'est_actif' => null,
        'roles' => 'uuid',
        'vient_du_ldap' => null,
        'vient_de_mg_login' => null,
        'filtres_acces' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'identifiant' => false,
		'nom_complet' => false,
		'email' => false,
		'est_administrateur' => false,
		'est_actif' => false,
		'roles' => false,
		'vient_du_ldap' => false,
		'vient_de_mg_login' => false,
		'filtres_acces' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'identifiant' => 'identifiant',
        'nom_complet' => 'nomComplet',
        'email' => 'email',
        'est_administrateur' => 'estAdministrateur',
        'est_actif' => 'estActif',
        'roles' => 'roles',
        'vient_du_ldap' => 'vientDuLdap',
        'vient_de_mg_login' => 'vientDeMgLogin',
        'filtres_acces' => 'filtresAcces'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'identifiant' => 'setIdentifiant',
        'nom_complet' => 'setNomComplet',
        'email' => 'setEmail',
        'est_administrateur' => 'setEstAdministrateur',
        'est_actif' => 'setEstActif',
        'roles' => 'setRoles',
        'vient_du_ldap' => 'setVientDuLdap',
        'vient_de_mg_login' => 'setVientDeMgLogin',
        'filtres_acces' => 'setFiltresAcces'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'identifiant' => 'getIdentifiant',
        'nom_complet' => 'getNomComplet',
        'email' => 'getEmail',
        'est_administrateur' => 'getEstAdministrateur',
        'est_actif' => 'getEstActif',
        'roles' => 'getRoles',
        'vient_du_ldap' => 'getVientDuLdap',
        'vient_de_mg_login' => 'getVientDeMgLogin',
        'filtres_acces' => 'getFiltresAcces'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('identifiant', $data ?? [], null);
        $this->setIfExists('nom_complet', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('est_administrateur', $data ?? [], null);
        $this->setIfExists('est_actif', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('vient_du_ldap', $data ?? [], null);
        $this->setIfExists('vient_de_mg_login', $data ?? [], null);
        $this->setIfExists('filtres_acces', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['identifiant'] === null) {
            $invalidProperties[] = "'identifiant' can't be null";
        }
        if ($this->container['nom_complet'] === null) {
            $invalidProperties[] = "'nom_complet' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['est_administrateur'] === null) {
            $invalidProperties[] = "'est_administrateur' can't be null";
        }
        if ($this->container['est_actif'] === null) {
            $invalidProperties[] = "'est_actif' can't be null";
        }
        if ($this->container['roles'] === null) {
            $invalidProperties[] = "'roles' can't be null";
        }
        if ($this->container['vient_du_ldap'] === null) {
            $invalidProperties[] = "'vient_du_ldap' can't be null";
        }
        if ($this->container['vient_de_mg_login'] === null) {
            $invalidProperties[] = "'vient_de_mg_login' can't be null";
        }
        if ($this->container['filtres_acces'] === null) {
            $invalidProperties[] = "'filtres_acces' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identifiant
     *
     * @return string
     */
    public function getIdentifiant()
    {
        return $this->container['identifiant'];
    }

    /**
     * Sets identifiant
     *
     * @param string $identifiant identifiant
     *
     * @return self
     */
    public function setIdentifiant($identifiant)
    {

        if (is_null($identifiant)) {
            throw new \InvalidArgumentException('non-nullable identifiant cannot be null');
        }

        $this->container['identifiant'] = $identifiant;

        return $this;
    }

    /**
     * Gets nom_complet
     *
     * @return string
     */
    public function getNomComplet()
    {
        return $this->container['nom_complet'];
    }

    /**
     * Sets nom_complet
     *
     * @param string $nom_complet nom_complet
     *
     * @return self
     */
    public function setNomComplet($nom_complet)
    {

        if (is_null($nom_complet)) {
            throw new \InvalidArgumentException('non-nullable nom_complet cannot be null');
        }

        $this->container['nom_complet'] = $nom_complet;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {

        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets est_administrateur
     *
     * @return bool
     */
    public function getEstAdministrateur()
    {
        return $this->container['est_administrateur'];
    }

    /**
     * Sets est_administrateur
     *
     * @param bool $est_administrateur est_administrateur
     *
     * @return self
     */
    public function setEstAdministrateur($est_administrateur)
    {

        if (is_null($est_administrateur)) {
            throw new \InvalidArgumentException('non-nullable est_administrateur cannot be null');
        }

        $this->container['est_administrateur'] = $est_administrateur;

        return $this;
    }

    /**
     * Gets est_actif
     *
     * @return bool
     */
    public function getEstActif()
    {
        return $this->container['est_actif'];
    }

    /**
     * Sets est_actif
     *
     * @param bool $est_actif est_actif
     *
     * @return self
     */
    public function setEstActif($est_actif)
    {

        if (is_null($est_actif)) {
            throw new \InvalidArgumentException('non-nullable est_actif cannot be null');
        }

        $this->container['est_actif'] = $est_actif;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[] $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {

        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }

        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets vient_du_ldap
     *
     * @return bool
     */
    public function getVientDuLdap()
    {
        return $this->container['vient_du_ldap'];
    }

    /**
     * Sets vient_du_ldap
     *
     * @param bool $vient_du_ldap vient_du_ldap
     *
     * @return self
     */
    public function setVientDuLdap($vient_du_ldap)
    {

        if (is_null($vient_du_ldap)) {
            throw new \InvalidArgumentException('non-nullable vient_du_ldap cannot be null');
        }

        $this->container['vient_du_ldap'] = $vient_du_ldap;

        return $this;
    }

    /**
     * Gets vient_de_mg_login
     *
     * @return bool
     */
    public function getVientDeMgLogin()
    {
        return $this->container['vient_de_mg_login'];
    }

    /**
     * Sets vient_de_mg_login
     *
     * @param bool $vient_de_mg_login vient_de_mg_login
     *
     * @return self
     */
    public function setVientDeMgLogin($vient_de_mg_login)
    {

        if (is_null($vient_de_mg_login)) {
            throw new \InvalidArgumentException('non-nullable vient_de_mg_login cannot be null');
        }

        $this->container['vient_de_mg_login'] = $vient_de_mg_login;

        return $this;
    }

    /**
     * Gets filtres_acces
     *
     * @return \OpenAPI\Client\Model\DossierFiltresAccesInnerOneOf[]
     */
    public function getFiltresAcces()
    {
        return $this->container['filtres_acces'];
    }

    /**
     * Sets filtres_acces
     *
     * @param \OpenAPI\Client\Model\DossierFiltresAccesInnerOneOf[] $filtres_acces Les filtres sans valeur n'apparaissent pas
     *
     * @return self
     */
    public function setFiltresAcces($filtres_acces)
    {

        if (is_null($filtres_acces)) {
            throw new \InvalidArgumentException('non-nullable filtres_acces cannot be null');
        }

        $this->container['filtres_acces'] = $filtres_acces;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


